@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
!pragma layout smetana

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryAreas
{
{static}-rootArea: Area
{static}-allDoors: Door[]
{static}+makeAreas()
{static}+makeDoors()
{static}+findAreaById(id : String) : Area
{static}-findDoorsByIds(ids : String[]) : Door[]
{static}+findDoorById(id : String) : Door
{static}+getAllDoors() : Door[]
}

DirectoryAreas --> "*" Area : "rootArea"

class Door {
- id : String
- closed : boolean
- currentState : DoorState
- fromSpace : Space
- toSpace : Space
+ Door(id : String, Space : fromSpace, Space : toSpace)
+ processRequest(request : RequestReader)
- doAction(action : String)
+ toJson() : JSONObject
}

class DirectoryUserGroups {
- userGroups : UserGroup[]
+ makeUserGroups()
+ findUserByCredential(credential : String) : User
}

DirectoryUserGroups o--> "1..*" UserGroup : "userGroups"
UserGroup "1 userGroup"*-->"users*" User

class UserGroup {
- name : String
- users : User[]
- allowedActions : String[]
- allowedAreas : String[]
- schedule : Schedule
+ addUser(user : User)
+ canSendRequests(dateTime : LocalDateTime) : boolean
+ canBeInSpace(space : Space) : boolean
+ canDoAction(action : String) : boolean
+ findUserByCredential(credential : String) : User
}

UserGroup -right->"1" Schedule

class Schedule {
- weekDays : DayOfWeek[]
- startTime : LocalTime
- endTime : LocalTime
- startDate : LocalDate
- endDate : LocalDate

+ Schedule(weekDays : DayOfWeek[], startTime : LocalTime, endTime : LocalTime
    startDate : LocalDate, endDate : LocalDate)
+ isAllowedAt(dateTime : LocalDateTime) : boolean
}

class User {
- name : String
- credential : String
- userGroup : UserGroup
+ User(name: String, credential: String)
+ getCredential() : String
+ toString() : String
+ canBeInSpace(space : Space) : boolean
+ canSendRequests(dateTime : LocalDateTime) : boolean
+ canDoAction(action : String) : boolean
}


class Main {
+ {static} main(args : String)
}

abstract DoorState{
# door : Door
# name : String
{abstract}+ open()
{abstract}+ close()
{abstract}+ lock()
{abstract}+ unlock()
{abstract}+ unlockShortly()
{abstract}+ prop()
}

class Locked extends DoorState{
}

class Unlocked extends DoorState{
}

interface Observer{
{abstract}+ update(o: Observable, arg: Object)
}

class UnlockedShortly extends DoorState implements Observer{
{static}- CLOCK
- MAX_PERIOD : int
- startingTime : LocalDateTime
- timeComplete(time : LocalDateTime) : boolean
}

class Propped extends DoorState{
}

abstract Area{
#id : String
#name : String
#parent: Area
+ getId() : String
{abstract}+ getSpaces() : Space[]
{abstract}+ getDoorsGivingAccess() : Door[]
{abstract}+ findAreaById(id : String) : Area
}

class Space extends Area{
- doors : Door[]
}

class Partition extends Area{
- areas : Area[]
}

abstract Observable {
+ addObserver(o: Observer)
+ deleteObserver(o: Observer)
+ notifyObservers()
}

class Clock extends Observable {
- period : int
- date : LocalDateTime
- timer : Timer
+ start()
}

UnlockedShortly -left->"1" Clock : CLOCK

note right of Main::main
DirectoryDoors.makeDoors()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver
Door -->"1" DoorState : currentState
Partition *-->"*" Area : areas
Space -->"*" Door : doors
@enduml
