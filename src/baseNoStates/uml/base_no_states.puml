@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryDoors {
- {static} allDoors : Door[]
+ {static} makeDoors()
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
}

DirectoryDoors --> "*" Door : "allDoors"

class DirectoryUsers {
- {static} users : User[]
+ {static} makeUsers()
+ {static} findUserByCredential(credential : String) : User
}

DirectoryUsers --> "*" User : "users"

class Door {
- id : String
- closed : boolean
+ Door(id : String)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
- doAction(action : String)

}


class User {
- name : String
- credential : String
+ User(name: String, credential: String)
+ toString() : String
}


class Main {
+ {static} main(args : String)
}

abstract DoorState{
{abstract}+ changeState(action : String) : DoorState
}

class DoorStateLocked extends DoorState{
+ changeState(action : String) : DoorState
}

class DoorStateUnlocked extends DoorState{
+ changeState(action : String) : DoorState
}

class DoorStateUnlockedShortly extends DoorState{
+ changeState(action : String) : DoorState
}

class DoorStateOpened extends DoorState{
+ changeState(action : String) : DoorState
}

class DoorStateClosed extends DoorState{
+ changeState(action : String) : DoorState
}

abstract Area{

}

class Space extends Area{
- doors : Door[]
}

class Partition extends Area{
- areas : Area[]
}

note right of Main::main
DirectoryDoors.makeDoors()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryDoors
DirectoryDoors -[hidden]right- DirectoryUsers
Door -->"1" DoorState : doorState
Partition *-->"*" Area : areas
Space -->"*" Door : doors
@enduml
